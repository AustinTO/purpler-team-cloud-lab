---
- name: Configure Workstation and Join Domain
  hosts: workstations
  gather_facts: yes
  vars:
    ad_domain: "adlab.local"
    # Use UPN-format for domain join
    domain_join_user: "Administrator"
    domain_join_password: "LabPass1"
    new_hostname: "KBAEHR-WORKSTAT"
    dc_ip: "172.16.10.100"  # Private IP of your Domain Controller
  tasks:

    - name: Rename Workstation to new hostname
      ansible.windows.win_hostname:
        name: "{{ new_hostname }}"

    - name: Set DNS server for all adapters to the DC's IP
      ansible.windows.win_dns_client:
        dns_servers:
          - "{{ dc_ip }}"

    - name: Flush DNS cache
      ansible.windows.win_shell: ipconfig /flushdns
      args:
        executable: powershell.exe

    - name: Register DNS
      ansible.windows.win_shell: ipconfig /registerdns
      args:
        executable: powershell.exe

    - name: Perform DNS lookup for the domain
      ansible.windows.win_shell: nslookup {{ ad_domain }}
      args:
        executable: powershell.exe
      register: nslookup_result

    - name: Debug DNS lookup result
      debug:
        msg: "Initial nslookup output: {{ nslookup_result.stdout_lines }}"

    - name: Assert that the domain resolves to the DC IP
      assert:
        that:
          - nslookup_result.stdout is search(dc_ip)
        fail_msg: "DNS does not resolve '{{ ad_domain }}' to '{{ dc_ip }}'. Check your DNS settings."

    - name: Pause for 30 seconds for DNS propagation
      pause:
        seconds: 30

    - name: Test LDAP connectivity on port 389 to domain
      ansible.windows.win_shell: Test-NetConnection -ComputerName "{{ ad_domain }}" -Port 389
      args:
        executable: powershell.exe
      register: ldap_test
      ignore_errors: yes

    - name: Debug LDAP connectivity result
      debug:
        var: ldap_test.stdout_lines

    - name: Reboot workstation to ensure DNS settings take effect
      ansible.windows.win_reboot:
        msg: "Rebooting workstation after DNS update"
        pre_reboot_delay: 10
        post_reboot_delay: 20
        reboot_timeout: 300

    - name: Pause for connectivity after reboot
      pause:
        seconds: 30

    - name: Confirm connectivity after reboot
      ansible.windows.win_ping:

    - name: Perform DNS lookup for domain after reboot
      ansible.windows.win_shell: nslookup {{ ad_domain }}
      args:
        executable: powershell.exe
      register: nslookup_after

    - name: Debug post-reboot nslookup output
      debug:
        msg: "Post-reboot nslookup output: {{ nslookup_after.stdout_lines }}"

    - name: Additional pause for network stabilization after reboot
      pause:
        seconds: 30

    - name: Join Workstation to Domain using microsoft.ad.membership
      microsoft.ad.membership:
        dns_domain_name: "{{ ad_domain }}"
        domain_admin_user: "{{ domain_join_user }}"
        domain_admin_password: "{{ domain_join_password }}"
        state: domain
      register: join_result

    - name: Debug Domain Join Result
      debug:
        msg: "Domain join result: {{ join_result }}"

    - name: Reboot workstation after domain join
      ansible.windows.win_reboot:
        msg: "Rebooting workstation after domain join"
        pre_reboot_delay: 10
        post_reboot_delay: 20
        reboot_timeout: 300

    - name: Confirm connectivity after final reboot
      ansible.windows.win_ping:

    - name: Add domain user 'kbaehr' as local admin and Remote Desktop user
      ansible.windows.win_shell: |
        net localgroup "Administrators" /add "adlab\\kbaehr";
        net localgroup "Remote Desktop Users" /add "adlab\\kbaehr";
      args:
        executable: powershell.exe

    - name: Install Chocolatey
      ansible.windows.win_shell: |
        Set-ExecutionPolicy Bypass -Scope Process -Force;
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072;
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'));
      args:
        executable: powershell.exe

    - name: Install Chocolatey packages (Workstation)
      chocolatey.chocolatey.win_chocolatey:
        name:
          - googlechrome
          - vscode
          - sysmon
          - winlogbeat
          - wireshark
        state: present

    - name: Start winlogbeat service
      ansible.windows.win_service:
        name: winlogbeat
        state: started
